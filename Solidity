// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

contract Lottery {
    // Entities - manager, players, and winner
    address public manager;
    address payable[] public players;
    address payable public winner;

    event WinnerPicked(address winner, uint amount);

    constructor() {
        manager = msg.sender;
    }

    function participate() public payable {
        require(msg.value == 1 ether, "Please pay 1 ether only");
        players.push(payable(msg.sender));
    }

    function getBalance() public view returns (uint) {
        require(manager == msg.sender, "You are not the manager");
        return address(this).balance;
    }

    function random() internal view returns (uint) {
        return uint(keccak256(abi.encodePacked(block.prevrandao, block.timestamp, players.length)));
    }

    function pickWinner() public {
        require(manager == msg.sender, "You are not the manager");
        require(players.length >= 3, "Not enough players");

        uint r = random();
        uint index = r % players.length;
        winner = players[index];

        // Use call for transferring funds to avoid potential issues with gas limits
        (bool success, ) = winner.call{value: getBalance()}("");
        require(success, "Transfer failed");

        emit WinnerPicked(winner, getBalance());

        // Resetting players
        players = new address payable[](0) ;
    }
}
